{"version":3,"sources":["server.js"],"names":["app","keys","configs","call","server","on","err","ctx","console","error","_init","aotooServer","opts","middlewares","theApis","list","apis","index","mapper","js","css","root","pages","pluginsFolder","state","views","bodyparser","midw","use","name","fn","plugins","utileHand","callback","arguments","dist","files","dft","dynamic","buffer","gzip","_","merge","obj","extname","debug","process","env","NODE_ENV","port","dom","cb","init","listen","module","exports","e"],"mappings":"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","file":"../server.js","sourcesContent":["import Koa from 'koa'\nimport aotoo from 'aotoo-common'   // global.Aotoo\nimport render from 'koa-art-template'\nimport statics from 'koa-static-cache'\nimport bodyparser from 'koa-bodyparser'\nimport core, {fkp} from './fkpcore'\n\nconst app = new Koa()\n\nclass aotooServer {\n  constructor(opts={}){\n    this.middlewares = []\n    \n    let theApis = {\n      list: opts.apis || {}\n    }\n\n    this.configs = {\n      keys: opts.keys||['aotoo koa'],    // cookie session关键字\n      index: opts.index||'index',        // 默认首页\n\n      apis: theApis,                      // api接口集合\n      mapper: opts.mapper||{js: {}, css: {}},  // 静态资源映射文件\n\n      root: opts.root,              // 渲染默认目录\n      pages: opts.pages,        // control层文件夹，必须\n      pluginsFolder: opts.pluginsFolder   // 插件文件夹\n    }\n\n    this.state = {\n      views: false,\n      bodyparser: false\n    }\n  }\n\n  // 注册KOA2的中间间，与KOA2语法保持一致\n  async use(midw){\n    app.use(midw)\n  }\n\n  // 注册一个Aotoo插件方法\n  plugins(name, fn){\n    fkp.plugins(name, fn)\n  }\n\n  // 注册一个Aotoo助手方法\n  utile(name, fn) {\n    fkp.utileHand(name, fn)\n  }\n\n  callback(){\n    return app.callback(arguments)\n  }\n\n  // 指定站点静态路径，如 /images, /uploader, /user\n  async statics(dist, opts, files){\n    let dft = {\n      dynamic: false,\n      buffer: false,\n      gzip: false\n    }\n    if (opts) {\n      dft = _.merge(dft, opts)\n    }\n\n    app.use( statics(dist, dft, files) )\n  }\n\n  // 注册api接口集，用于做接口层的数据访问\n  async apis(obj={}){\n    if (typeof obj == 'object') {\n      this.configs.apis = obj\n    }\n  }\n\n\n  // 注册POST中间件，可以通过 ctx.bodys来访问post数据\n  async bodyparser(obj={}) {\n    if (typeof obj == 'object') {\n      this.state.bodyparser = true\n      app.use( bodyparser(obj) )\n    }\n  }\n\n\n  // 注册渲染方法\n  async views(dist, opts){\n    // import views from 'koa-views'   // 放到顶部\n    // let dft = {\n    //   map: {\n    //     html: (opts&&opts.html||'ejs')\n    //   }\n    // }\n    // if (opts&&opts.extension) {\n    //   dft.extension = opts.extension\n    // }\n    // if (opts&&opts.options) {\n    //   dft.options = opts.options\n    // }\n    // this.state.views = true\n    // app.use( views(dist, dft) )\n\n    let dft = {\n      root: dist,\n      extname: '.html',\n      debug: process.env.NODE_ENV !== 'production'\n    }\n    dft = _.merge({}, dft, opts)\n    this.state.views = true\n    render(app, dft)\n  }\n\n\n  // 初始化\n  async init(){\n    try {\n      if (!this.configs.pages) {\n        throw '必须指定control目录'\n      }\n      if (!this.state.views) {\n        if (!this.configs.root) {\n          throw '必须指定模板引擎的views目录'\n        } else {\n          this.views(this.configs.root)\n        }\n      }\n      if (!this.state.bodyparser) {\n        app.use( bodyparser() )\n      }\n      return await _init.call(this)\n      \n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  async listen(port, dom, cb){\n    const server = await this.init()\n    server.listen(port, dom, cb)\n  }\n}\n\n\nasync function _init() {\n  app.keys = this.configs.keys\n  const server = await core.call(this, app, this.configs)\n\tapp.on('error', async (err, ctx) => {\n\t\tconsole.error('server error', err, ctx)\n\t})\n\n  return server\n}\n\nmodule.exports = function(opts){\n  try {\n    if (!opts.pages) throw '必须指定 pages 目录选项, pages目录放置control层文件'\n    return new aotooServer(opts)\n  } catch (e) {\n    console.error(e);\n  } \n}\n"]}