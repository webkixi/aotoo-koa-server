{"version":3,"sources":["fkpcore/base/localstore/index.js"],"names":["fkp","localStore","dbpath","join","__dirname","existsSync","mkdirSync","mkdirsSync","dirpath","mode","pathtmp","dirs","split","sep","filter","dirname","map","createDataBase","_path","collections","db","connect","concat","loadCollections","_localDB","databasePath","control","count","query","find","findOne","dataToBeUpdate","opts","dft","Object","assign","multi","upsert","update","articls","id","save","delAll","remove","oldCollections","indexOf","parts","pop","length","$id","Cache","ifid","ldb","set","e","console","log"],"mappings":"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","file":"../../../../fkpcore/base/localstore/index.js","sourcesContent":["import fs from 'fs'\nimport diskdb from 'diskdb'\nimport Path from 'path'\n\n// const dbpath = Path.join(__dirname, 'server/db/diskdb/collections')\nconst dbpath = Path.join(__dirname, 'collections')\nif (!fs.existsSync(dbpath)) {\n  fs.mkdirSync(dbpath, '0777')\n}\n\n\nfunction mkdirsSync(dirpath, mode) {\n  mode='0777'\n  if (!fs.existsSync(dirpath)) {\n    var pathtmp;\n    let dirs = dirpath.split(Path.sep).filter( dirname => !!dirname )\n    dirs.map( dirname => {\n      if (pathtmp) pathtmp = Path.join(pathtmp, dirname)\n      else {\n        pathtmp = dirname;\n      }\n      if (!fs.existsSync(pathtmp)) {\n        if (!fs.mkdirSync(pathtmp, mode)) {\n          return false;\n        }\n      }\n    })\n  }\n  return true;\n}\n\n// function mkdir(directory){\n//   const _path = Path.join(dbpath, directory)\n//   if (!fs.existsSync(_path)) {\n//     fs.mkdirSync(_path, '0777')\n//   }\n// }\n\nfunction createDataBase(_path, collections){\n  const db = diskdb.connect(_path);\n  collections = [].concat(collections)\n  db.loadCollections(collections)\n  return db\n}\n\nclass _localDB {\n  constructor(collections, databasePath) {\n    this.collections = collections\n    const db = createDataBase(databasePath, collections)\n    this.control = db[collections]\n  }\n\n  count(){\n    return this.control.count()\n  }\n\n  find(query){\n    if (!query) this.control.find()\n    return this.control.find(query)\n  }\n\n  findOne(query){\n    if (!query) return this.control.findOne()\n    return this.control.findOne(query)\n  }\n\n  update(query, dataToBeUpdate, opts){\n    const dft = Object.assign({}, {multi: false, upsert: false}, opts)\n    return this.control.update(query, dataToBeUpdate, dft)\n  }\n\n  set(articls){\n    const count = this.count()\n    articls.id = count\n    this.control.save(articls)\n  }\n\n  get(query){\n    return this.control.findOne(query)\n  }\n\n  remove(query, delAll){\n    if (query) {\n      this.control.remove(query, delAll)\n    } else {\n      this.control.remove()\n    }\n  }\n\n  removeAll(query){\n    this.remove((query||{}), true)\n  }\n\n  clear(){\n    this.remove()\n  }\n}\n\nfunction localStore(fkp, collections) {\n  let databasePath = dbpath\n  const oldCollections = collections\n  if (typeof collections == 'string') {\n    if (collections.indexOf('/') > 0 ) {\n      const parts = collections.split('/')\n      collections = parts.pop()\n      if (parts.length) {\n        databasePath = Path.join(dbpath, parts.join('/') )\n        if (!fs.existsSync(databasePath)){\n          mkdirsSync(databasePath)\n        }\n      }\n    }\n\n    const $id = 'LocalDB_' + oldCollections\n    return Cache.ifid($id, function(){\n      try {\n        const ldb = new _localDB(collections, databasePath)\n        Cache.set($id, ldb)\n        return ldb\n      } catch (e) {\n        console.log(e);\n      }\n    })\n  }\n}\n\nexport default function(fkp){\n  return localStore\n}\n"]}