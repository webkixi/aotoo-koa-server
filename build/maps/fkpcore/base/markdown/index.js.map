{"version":3,"sources":["fkpcore/base/markdown/index.js"],"names":["fkp","opts","MarkdownDocs","path","require","mdParse","getHomeStruct","title","descript","url","img","config","exist","cloneIt","obj","JSON","parse","_dir","that","tree","rootobj","rootFeather","name","idf","loopDir","$_dir","parent","parentObj","$dir","$_dirObj","home","sync","forEach","stat","statSync","item","isFile","indexOf","ext","concat","mdInfo","file","_obj","dir","imgs","params","feather","push","isDirectory","parentId","_","uniqueId","dirFeather","_rootFeather","raw","filename","fileFeather","existsSync","fid","Cache","ifid","readFileSync","set","folderInfo","covers","covs","folder","$cov"],"mappings":"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","file":"../../../../fkpcore/base/markdown/index.js","sourcesContent":["import fs from 'fs'\nimport glob from 'glob'\nimport md5 from 'blueimp-md5'\nconst path = require('path')\nconst mdParse = require('../markdown')\n\nfunction getHomeStruct(){\n  return {\n    title: '',\n    descript: '',\n    path: '',\n    url: '',\n    img: '',\n    config: '',\n    exist: false\n  }\n}\n\nfunction cloneIt(obj){\n  return JSON.parse(JSON.stringify(obj))\n}\n\n// markdown目录及文档分析\nclass MarkdownDocs {\n  constructor(opts={}){\n    this.opts = opts\n  }\n\n\n  // 分析目录并返回目录结构\n  // 递归遍历所有文件及目录\n  // 生成aotoo.transtree的数据树结构，参考aotoo.transtree\n  folderInfo(_dir){\n    const opts = this.opts\n    const that = this\n    let tree = []\n\n    const rootobj = path.parse(_dir)\n    let rootFeather = {\n      title: rootobj.name,\n      path: _dir,\n      url: rootobj.name,\n      idf: 'root'\n    }\n\n    function loopDir($_dir, parent, parentObj){\n      const $dir = $_dir+'/*'\n      const $_dirObj = path.parse($_dir)\n      let home = getHomeStruct()\n      glob.sync($dir).forEach( item => {\n        const stat = fs.statSync(item) \n        const obj = path.parse(item)\n        if (stat.isFile()) {\n          // const raw = fs.readFileSync(item, 'utf-8')\n          // const mdInfo = md(raw, {})\n\n          // 目录描述图\n          if (['.jpg', '.jpeg', '.png', '.gif'].indexOf(obj.ext)>-1) {\n            if (obj.name.indexOf('index')>-1) {\n              home.img = home.img ? home.img.concat(item) : [].concat(item)\n            }\n          }\n\n          // 目录配置文件\n          if (obj.name == 'config' && parent) {\n            parentObj.config = require(item)\n          }\n\n          if (obj.ext == '.md') {\n            const mdInfo = that.file(item)\n            \n            // 目录首页\n            if (obj.name == 'index') {\n              const _obj = path.parse(obj.dir)\n              home.title = mdInfo.title||obj.name\n              home.descript = mdInfo.descript\n              home.path = item\n              home.url = _obj.name\n              home.img = home.img ? home.img : mdInfo.img\n              home.imgs = mdInfo.imgs\n              home.exist = true\n              home.params = mdInfo.params\n            } else {\n              let feather = {\n                title: mdInfo.title,\n                descript: mdInfo.descript,\n                path: item,\n                url: obj.name+obj.ext,\n                img: mdInfo.img,\n                imgs: mdInfo.imgs,\n                params: mdInfo.params\n              }\n              if (parent) {\n                feather.url = parentObj.url+'/'+feather.url\n                feather.parent = parent\n              }\n              tree.push(feather)\n            }\n\n\n            // 将home文件加入\n            if (parent) {\n              parentObj.home = home\n            }\n          }\n        }\n\n        if (stat.isDirectory()) {\n          const parentId = _.uniqueId(obj.name+'_')\n          let dirFeather = {\n            title: obj.name,\n            path: item,\n            url: obj.name,\n            idf: parentId\n          }\n          if (parent) {\n            dirFeather.url = parentObj.url+'/'+dirFeather.url\n            dirFeather.parent = parent\n          }\n          tree.push(dirFeather)\n          loopDir(item, parentId, dirFeather)\n        }\n      })\n    }\n    let _rootFeather = cloneIt(rootFeather)\n    tree.push(_rootFeather)\n    loopDir(_dir, 'root', _rootFeather)\n    \n    return {tree}\n  }\n\n  parse(raw, opts){\n    return mdParse(raw, opts)\n  }\n\n  file(filename){\n    const that = this\n    const fileFeather = path.parse(filename)\n    if (fileFeather.ext !== '.md') return \n    \n    const opts = this.opts\n    if (fs.existsSync(filename)) {\n      const fid = md5(filename)\n      return Cache.ifid(fid, function(){\n        const raw = fs.readFileSync(filename, 'utf-8')\n        const mdInfo = that.parse(raw, opts)\n        Cache.set(fid, mdInfo, 144*60*60*1000)\n        return mdInfo\n      })\n    }\n  }\n\n  folder(dir){\n    if (dir && fs.existsSync(dir)) {\n      return this.folderInfo(dir)\n    }\n  }\n\n\n  // 查找文档目录下的分类目录，过滤文档目录下的文档\n  covers(dir){\n    let covers = []\n    if (dir && fs.existsSync(dir)) {\n      glob.sync(dir).forEach( item => {\n        const stat = fs.statSync(item) \n        if (stat.isDirectory()) {\n          const covs = this.folder(item).tree\n          covs.forEach( $cov=>{\n            if ($cov.parent == 'root' && $cov.idf) {\n              covers.push($cov)\n            }\n          }) \n        }\n      })\n    }\n    return covers\n  }\n}\n\n/*\n * usage\n * const mdParse = ctx.fkp.markdown({ // marked的配置选项  })\n * mdParse.covers(path)\n * mdParse.folder(path)\n * mdParse.file(path)\n * \n * path = 绝对路径\n*/\nexport default function(fkp){\n  return function(fkp, opts={}){\n    return new MarkdownDocs(opts)\n  }\n}"]}