{"version":3,"sources":["fkpcore/base/directory/index.js"],"names":["fs","require","path","glob","DEBUG","debug","folderInfo","_dir","tree","loopDir","$dir","parent","sync","forEach","stat","statSync","item","obj","parse","isFile","feather","title","name","url","push","isDirectory","parentId","_","uniqueId","dirFeather","idf","index","fkp","dir","existSync","e","message","module","exports"],"mappings":";;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,QAAQC,MAAM,oBAAN,CAAd;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACvB,MAAIC,OAAO,EAAX;AACA,WAASC,OAAT,CAAiBC,IAAjB,EAAuBC,MAAvB,EAA8B;AAC5BD,WAAOA,OAAK,IAAZ;AACAP,SAAKS,IAAL,CAAUF,IAAV,EAAgBG,OAAhB,CAAyB,gBAAQ;AAC/B,UAAMC,OAAOd,GAAGe,QAAH,CAAYC,IAAZ,CAAb;AACA,UAAMC,MAAOf,KAAKgB,KAAL,CAAWF,IAAX,CAAb;AACA,UAAIF,KAAKK,MAAL,EAAJ,EAAmB;AACjB,YAAIC,UAAU;AACZC,iBAAOJ,IAAIK,IADC;AAEZpB,gBAAMc,IAFM;AAGZO,eAAKN,IAAIK;AAHG,SAAd;AAKA,YAAIX,MAAJ,EAAY;AACVS,kBAAQT,MAAR,GAAiBA,MAAjB;AACD;AACDH,aAAKgB,IAAL,CAAUJ,OAAV;AACD;;AAED,UAAIN,KAAKW,WAAL,EAAJ,EAAwB;AACtB,YAAMC,WAAWC,EAAEC,QAAF,CAAWX,IAAIK,IAAJ,GAAS,GAApB,CAAjB;AACA,YAAIO,aAAa;AACfR,iBAAOJ,IAAIK,IADI;AAEfpB,gBAAMc,IAFS;AAGfO,eAAKN,IAAIK,IAHM;AAIfQ,eAAKJ;AAJU,SAAjB;AAMA,YAAIf,MAAJ,EAAY;AACVkB,qBAAWlB,MAAX,GAAoBA,MAApB;AACD;AACDH,aAAKgB,IAAL,CAAUK,UAAV;AACApB,gBAAQO,IAAR,EAAcU,QAAd;AACD;AACF,KA7BD;AA8BD;;AAEDjB,UAAQF,IAAR;AACA,SAAO,EAAEC,UAAF,EAAP;AACD;;AAED,SAASuB,KAAT,CAAeC,GAAf,EAAoBC,GAApB,EAAwB;AACtB,MAAI;AACF,QAAIjC,GAAGkC,SAAH,CAAaD,GAAb,CAAJ,EAAuB;AACrB,aAAO3B,WAAW2B,GAAX,CAAP;AACD;AACF,GAJD,CAIE,OAAOE,CAAP,EAAU;AACV/B,UAAM,cAAN,EAAsB+B,EAAEC,OAAxB;AACD;AACF;;AAEDC,OAAOC,OAAP,GAAiB,UAASN,GAAT,EAAa;AAC5B,SAAOD,KAAP;AACD,CAFD","file":"../../../../fkpcore/base/directory/index.js","sourcesContent":["const fs = require('fs')\nconst path = require('path')\nconst glob = require('glob')\nconst DEBUG = debug('fkp:base:directory')\n\nfunction folderInfo(_dir){\n  let tree = []\n  function loopDir($dir, parent){\n    $dir = $dir+'/*'\n    glob.sync($dir).forEach( item => {\n      const stat = fs.statSync(item) \n      const obj  = path.parse(item)\n      if (stat.isFile()) {\n        let feather = {\n          title: obj.name,\n          path: item,\n          url: obj.name\n        }\n        if (parent) {\n          feather.parent = parent\n        }\n        tree.push(feather)\n      }\n\n      if (stat.isDirectory()) {\n        const parentId = _.uniqueId(obj.name+'_')\n        let dirFeather = {\n          title: obj.name,\n          path: item,\n          url: obj.name,\n          idf: parentId\n        }\n        if (parent) {\n          dirFeather.parent = parent\n        }\n        tree.push(dirFeather)\n        loopDir(item, parentId)\n      }\n    })\n  }\n  \n  loopDir(_dir)\n  return { tree }\n}\n\nfunction index(fkp, dir){\n  try {\n    if (fs.existSync(dir)) {\n      return folderInfo(dir)\n    }\n  } catch (e) {\n    DEBUG('parsedir: %s', e.message)\n  }\n}\n\nmodule.exports = function(fkp){\n  return index\n}\n"]}